{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf3f Laity Data Structures","text":"<p>Laity Data Structures is a Python package that provides simple and educational implementations of essential non-primitive data structures such as stacks, queues, linked lists, and binary search trees.</p> <p>Whether you're a student, a developer preparing for interviews, or someone curious about how data structures work under the hood \u2014 this package is for you.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>\u2705 Easy-to-read Python code</li> <li>\ud83e\uddf1 Stack, Queue, Linked List, Binary Search Tree implementations</li> <li>\ud83d\udcd8 Educational method names and documentation</li> <li>\ud83d\udce6 Simple pip installation</li> <li>\ud83c\udf93 Ideal for learning &amp; teaching</li> </ul>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"<pre><code>pip install laity-data-structures\n</code></pre> <p>Once installed, you can import any class into your project:</p> <pre><code>from laity.stack import Stack\n\ns = Stack()\ns.push(10)\ns.push(20)\ns.display()  # Output: [10, 20]\n</code></pre>"},{"location":"#data-structures-included","title":"\ud83e\uddf0 Data Structures Included","text":""},{"location":"#stack","title":"\ud83d\udd01 Stack","text":"<p>A Last-In, First-Out (LIFO) linear data structure.</p> <pre><code>stack.push(value)\nstack.pop()\nstack.peek()\nstack.is_empty()\nstack.size()\nstack.display()\n</code></pre>"},{"location":"#queue","title":"\ud83d\udce4 Queue","text":"<p>A First-In, First-Out (FIFO) linear structure for sequential data processing.</p> <pre><code>queue.enqueue(value)\nqueue.dequeue()\nqueue.peek()\nqueue.rear()\nqueue.is_empty()\nqueue.display()\n</code></pre>"},{"location":"#singly-linked-list","title":"\ud83d\udd17 Singly Linked List","text":"<p>A series of nodes connected using pointers. Efficient for insertions and deletions.</p> <pre><code>linked_list.insert(value)\nlinked_list.insertAtBeginning(value)\nlinked_list.insertAfter(index, new_value)\nlinked_list.delete(value)\nlinked_list.search(value)\nlinked_list.traverse()\nlinked_list.display()\n</code></pre>"},{"location":"#binary-search-tree-bst","title":"\ud83c\udf33 Binary Search Tree (BST)","text":"<p>A hierarchical structure where each node has at most two children. Left child &lt; node &lt; right child.</p> <pre><code>bst.insert(value)\nbst.search(value)\nbst.printInOrder()\nbst.printPreOrder()\nbst.printPostOrder()\n</code></pre>"},{"location":"#project-structure","title":"\ud83d\udcc2 Project Structure","text":"<pre><code>laity-data-structures-py/\n\u2502\n\u251c\u2500\u2500 laity/\n\u2502   \u251c\u2500\u2500 stack.py\n\u2502   \u251c\u2500\u2500 queue.py\n\u2502   \u251c\u2500\u2500 linked_list.py\n\u2502   \u251c\u2500\u2500 tree.py\n\u2502\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 stack_test.ipynb\n\u2502   \u251c\u2500\u2500 queue_test.ipynb\n\u2502   \u251c\u2500\u2500 linked_list_test.ipynb\n\u2502   \u251c\u2500\u2500 tree_test.ipynb\n\u2502\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 LICENSE\n</code></pre>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Here's how you can help:</p> <ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feature/AmazingFeature</code>)</li> <li>Commit your changes (<code>git commit -m 'Add some AmazingFeature'</code>)</li> <li>Push to the branch (<code>git push origin feature/AmazingFeature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License \u2014 see the LICENSE file for details.</p>"},{"location":"#acknowledgements","title":"\ud83d\ude4c Acknowledgements","text":"<p>Created with \u2764\ufe0f by PappaLaity Inspired by educational goals and the love of clean, simple code.</p>"},{"location":"#ready-to-explore","title":"\ud83d\ude80 Ready to Explore?","text":"<p>Install it, play with it, modify it \u2014 and level up your understanding of data structures one line at a time.</p> <pre><code>pip install laity-data-structures\n</code></pre>"},{"location":"LinkedList/","title":"\ud83d\udd17 Linked List \u2013 Data Structure","text":"<p>A Linked List is a linear data structure composed of a sequence of connected nodes. Unlike arrays, the elements (nodes) in a linked list are not stored in contiguous memory locations.</p> <p>A linked list is represented by a pointer to its first node, known as the head. If the list is empty, the head points to NULL.</p> <p>Each node typically contains two components: - \ud83d\udce6 Data \u2013 The value held by the node - \ud83e\udded Pointer \u2013 A reference to the next node in the sequence  </p>"},{"location":"LinkedList/#basic-linked-list-operations","title":"\u2699\ufe0f Basic Linked List Operations","text":"<p>Here are the most common operations performed on a linked list:</p> <ul> <li>\u2795 Insert: Add a node at the beginning, at the end, or at a specific position  </li> <li>\u2796 Delete: Remove a node from the beginning, the end, or a specific position  </li> <li>\ud83d\udc41\ufe0f Display: Traverse the list from the head to the end, visiting each node in order  </li> <li>\ud83d\udd0d Search: Look for a node containing a specific value or property  </li> <li>\ud83d\udccf Get Length: Count the number of nodes in the list  </li> <li>\ud83d\udcc2 Access: Retrieve data from a specific node by traversing the list  </li> <li>\ud83d\udcdd Update: Modify the data of a specific node by locating and updating it  </li> <li>\ud83d\udd17 Concatenate: Join two linked lists by linking the last node of the first to the head of the second  </li> <li>\ud83d\udd01 Reverse: Reverse the order of the nodes in the list  </li> <li>\ud83d\udd22 Sort: Rearrange the nodes based on a given value or property  </li> </ul>"},{"location":"LinkedList/#implemented-methods","title":"\ud83e\uddea Implemented Methods","text":"<p>This package includes an implementation of the following methods for a Singly Linked List:</p> \ud83d\uddc3\ufe0f Data Structure \ud83d\udee0\ufe0f Available Methods Singly Linked List <code>head()</code>, <code>insert()</code>, <code>insertAtBeginning()</code>, <code>insertAfter()</code>, <code>delete()</code>, <code>search()</code>, <code>traverse()</code>, <code>display()</code> <p>\ud83d\udccc Note: These functions allow full control over list management, from basic insertion to advanced operations like reversal and concatenation.</p>"},{"location":"Queue/","title":"\ud83d\udce6 Queue \u2013 Data Structure","text":"<p>Like a Stack, a Queue is also a linear data structure. However, it follows the FIFO principle (First In, First Out), meaning the first element inserted is the first to be removed.</p>"},{"location":"Queue/#basic-queue-operations","title":"\u2699\ufe0f Basic Queue Operations","text":"<p>Here are the fundamental operations you can perform on a queue:</p> <ul> <li>\u2795 <code>enqueue()</code> \u2013 Adds an element to the rear of the queue</li> <li>\u2796 <code>dequeue()</code> \u2013 Removes the front element of the queue</li> <li>\ud83d\udc41\ufe0f <code>peek()</code> or <code>front()</code> \u2013 Returns the front element without removing it</li> <li>\ud83d\udd1a <code>rear()</code> \u2013 Returns the last element without removing it</li> <li>\ud83e\uddf1 <code>isFull()</code> \u2013 Checks whether the queue is full</li> <li>\u26aa <code>isNull()</code> \u2013 Checks whether the queue is empty</li> </ul>"},{"location":"Queue/#implemented-methods","title":"\ud83e\uddea Implemented Methods","text":"<p>In this package, we implement the following methods for the Queue data structure:</p> \ud83d\uddc3\ufe0f Data Structure \ud83d\udee0\ufe0f Available Methods Queue <code>enqueue()</code>, <code>dequeue()</code>, <code>peek()</code>, <code>rear()</code>, <code>is_empty()</code>, <code>display()</code> <p>\ud83d\udd01 Note: In our implementation, <code>is_empty()</code> is used instead of <code>isNull()</code> for consistency with common coding conventions.</p>"},{"location":"Stack/","title":"\ud83e\uddf1 Stack \u2013 Data Structure","text":"<p>A stack is a linear data structure that follows the LIFO principle (Last In, First Out), meaning the last element inserted is the first to be removed.</p>"},{"location":"Stack/#basic-stack-operations","title":"\u2699\ufe0f Basic Stack Operations","text":"<p>Here are the fundamental operations that can be performed on a stack:</p> <ul> <li>\ud83d\udd3c <code>push()</code> \u2013 Inserts an element into the stack  </li> <li>\ud83d\udd3d <code>pop()</code> \u2013 Removes the last inserted element  </li> <li>\ud83d\udd0d <code>top()</code> \u2013 Returns the top element of the stack without removing it  </li> <li>\u26aa <code>isEmpty()</code> \u2013 Returns <code>true</code> if the stack is empty, otherwise <code>false</code> </li> <li>\ud83d\udccf <code>size()</code> \u2013 Returns the current size of the stack  </li> </ul>"},{"location":"Stack/#implemented-methods","title":"\ud83e\uddea Implemented Methods","text":"<p>In this package, we implemented the following methods to manipulate a stack:</p> \ud83d\uddc3\ufe0f Data Structure \ud83d\udee0\ufe0f Available Methods Stack <code>push()</code>, <code>pop()</code>, <code>peek()</code>, <code>is_empty()</code>, <code>size()</code>, <code>display()</code> <p>\ud83d\udd01 Note: The <code>peek()</code> method is equivalent to <code>top()</code>, allowing you to view the top element without removing it.</p>"},{"location":"Tree/","title":"Tree Data Structure","text":""},{"location":"Tree/#binary-tree","title":"Binary Tree","text":"<p>A Tree is a non-linear hierarchical data structure composed of nodes connected by edges. </p> <p>A Binary Tree is a specific type of tree where each node has at most two children, referred to as: - Left Child - Right Child</p>"},{"location":"Tree/#key-components","title":"Key Components","text":"<ul> <li>Root: The topmost node in the tree</li> <li>Leaf Nodes: The bottommost nodes (nodes without any children)</li> <li>Node Structure:</li> <li>Data</li> <li>Pointer to left child</li> <li>Pointer to right child</li> </ul>"},{"location":"Tree/#binary-search-tree-bst-implementation","title":"Binary Search Tree (BST) Implementation","text":"<p>In this package, we implement the following functions for a Binary Search Tree:</p> Data Structure Methods Binary Search Tree <code>head()</code>, <code>insert()</code>, <code>search()</code>, <code>printInorder()</code>, <code>printPreOrder()</code>, <code>printPostOrder()</code>"},{"location":"Tree/#tree-traversal-methods","title":"Tree Traversal Methods","text":"<ol> <li>Inorder Traversal: Left \u2192 Root \u2192 Right</li> <li>Preorder Traversal: Root \u2192 Left \u2192 Right</li> <li>Postorder Traversal: Left \u2192 Right \u2192 Root</li> </ol>"}]}